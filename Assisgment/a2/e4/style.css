*{
  box-sizing: border-box;
  background-origin: border-box;
  margin: 0;
}

/* To make the webpage feel coherent, I went ahead and took a screenshot of the video and extracted a colour pallet. Since it's the only element on this page, it makes logical sense to expand the website style from the video. */
:root{
  --col-01:#0d0000;
  --col-02:#2D0C18;
  --col-03:#9B63BF;
  --col-04:#A67C93;
  --col-05:#A68fd9;
  --col-06:#ffffff;
  --col-07:#81586e;
  --border: 1px solid var(--col-06);
}

/* To add some extra style to the page, I went ahead and created a colour-changing background. Using colours from the video allows for the video to extend its limitation as it engulfs the whole screen. This idea of covering the screen is the same as to why I picked the full-screen feature. The effect can be a bit impractical when viewing a video but because the video is abstract the effect works. The div is sent to the back via z-index and has been given an animation that loops forever so the effect doesn't break. */
#background{
  z-index: -10;
  width: 100%;
  height: 100%;
  flex-direction: column;
  position: absolute;
  animation-name: backgroundLoop;
  animation-duration: 30s;
  animation-iteration-count: infinite;
  display: none;
}

/* The animation code being placed here might be a bit impractical but I do so for convenience in reviewing my code. */
@keyframes backgroundLoop {
  0% {
   background-color: var(--col-05);
  }
  15% {
   background-color: var(--col-02);
  }
  30% {
   background-color: var(--col-04);
  }
  45% {
   background-color: var(--col-01);
  }
  60% {
   background-color: var(--col-03);
  }
  75% {
    background-color: var(--col-02);
   }
   90% {
    background-color: var(--col-04);
   }
   100% {
    background-color: var(--col-05);
   }
}

/* I added Top, Left and Position here so the video could be displayed centrally. This position is more pleasing to look at as the video sits in the negative space evenly. */
.video-player-wrapper{
  display: flex;
  flex-direction: column;
  position: absolute;
  top: 18%;
  left: 25%;
  width: 50%;
  margin: 0 auto;
}

/* Added a pointer due to the overlay needed to indicate it can be clicked. The video itself also activates play/pause so it made sense for that too. */
.video-element-wrapper{
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: 1fr;
  cursor: pointer;
}

#videoElement{
  width: 100%;
  grid-column: 1/2;
  grid-row: 1/2;
}

#videoPlayOverlay{
  width: 8rem;
  height: 8rem;
  grid-column: 1/2;
  grid-row: 1/2;
  opacity: 0.6;
  justify-self: center;
  align-self: center;
}

.video-controls-wrapper{
  display: flex;
  justify-content: center;
}

#controlsWrapper{
  display: none;
}

/* I changed these background colours to white so It blended in with the play time bar. */
.video-control-button{
  width: 2rem;
  height: 2rem;
  padding: .1rem;
  background-color: var(--col-06);
  border: none;
  cursor: pointer;
}
/* Picked a colour that represents the video. */
.video-control-button:hover{
  background-color: var(--col-04);
}
/* Created a new colour so the jump from light to dark wasnâ€™t as harsh but still noticeable so the user understands that the button has been pressed from a distance. */
.video-control-button:active{
  background-color: var(--col-07);
}
.button-icon{
  pointer-events: none;
}

#playButton{
  background-image: url('./icons/play.svg');
}

#muteButton{
  background-image: url('./icons/mute.svg');
}

/* I picked full screen as my one feature. This is due to the human desire of wanting to be emersed by a video. The best way to achieve this is to make the video engulf your screen, blocking out all other distractions that can be found in your tabs or taskbar. Doing this also allows for a break from the changing background colours. Some people might also not have the best eyesight and enlarging an item makes it easier to view the element. Changing sound levels and reversing the clip is useful but can be achieved from manual input. You can manually zoom in on a screen but it doesn't have the same outcome as enlarging a video as you can still see the computer and browser interface. This is why I believe an enlarged screen is the most important element to add. */
#fullScreenButton{
  background-image: url('./icons/fullScreen.svg');
}

/* I made the background of the bar white and the loading bar colour from the video. Because the first background colour is white it makes the bar look integrated into the website, as if it belongs here. The progress borrows colour from the video to help integration take place even when the page background is no longer white. I also got rid of the shadow box to help the intergraded look more. */
.video-progress-bar{
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  border: none;
  height: 2rem;
  flex-grow: 1;
  cursor: pointer;
  background-color: var(--col-06);
}
::-moz-progress-bar {
  background-color: var(--col-06);
}

::-webkit-progress-bar {
  background-color: var(--col-06);
}
::-webkit-progress-value {
  background-color: var(--col-04);
}

.timeline-loading{
  background-image: -moz-repeating-linear-gradient(45deg, var(--col-03) 0% 2%, transparent 2% 4%, red 4%);
  background-size: 200% 100%;
  animation: loadingAnimation 4s linear infinite;
}

@keyframes loadingAnimation {
  100%{
    background-position: 50% 0%;
  }
}
